"use client";

import React from "react";
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogFooter
} from "@/components/ui/Modal";
import { Button } from "@/components/ui/Button";
import { formatDate } from "@/lib/utils";
import { Scout } from "@/types";

interface ScoutDetailModalProps {
  open: boolean;
  onClose: () => void;
  scout: Scout | null;
}

export default function ScoutDetailModal({ open, onClose, scout }: ScoutDetailModalProps) {
  if (!scout) return null;

  return (
    <Dialog 
      open={open} 
      onOpenChange={(isOpen) => {
        if (!isOpen) onClose();
      }}
    >
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{scout.name}&apos;s Profile</DialogTitle>
        </DialogHeader>
        <div className="p-4">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="achievements">Achievements</TabsTrigger>
            <TabsTrigger value="medical">Medical</TabsTrigger>
            <TabsTrigger value="attendance">Attendance</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="mt-4">
            <div className="space-y-4">
              <div className="flex flex-col space-y-1">
                <h3 className="font-semibold">Personal Information</h3>
                <div className="grid grid-cols-2 gap-2">
                  <div><span className="font-medium">Name:</span> {scout.name}</div>
                  <div><span className="font-medium">Age:</span> {scout.age}</div>
                  <div><span className="font-medium">Group:</span> {scout.groupName}</div>
                  <div><span className="font-medium">Rank:</span> {scout.rank}</div>
                  <div><span className="font-medium">Joined:</span> {formatDate(scout.joinedDate, "MMM dd, yyyy")}</div>
                </div>
              </div>

              {scout.personalInfo && (
                <div className="flex flex-col space-y-1">
                  <h3 className="font-semibold">Contact Information</h3>
                  <div className="grid grid-cols-2 gap-2">
                    {scout.personalInfo.dateOfBirth && (
                      <div><span className="font-medium">Date of Birth:</span> {formatDate(scout.personalInfo.dateOfBirth, "MMM dd, yyyy")}</div>
                    )}
                    {scout.personalInfo.address && (
                      <div><span className="font-medium">Address:</span> {scout.personalInfo.address}</div>
                    )}
                    {scout.personalInfo.phone && (
                      <div><span className="font-medium">Phone:</span> {scout.personalInfo.phone}</div>
                    )}
                    {scout.personalInfo.email && (
                      <div><span className="font-medium">Email:</span> {scout.personalInfo.email}</div>
                    )}
                    {scout.personalInfo.school && (
                      <div><span className="font-medium">School:</span> {scout.personalInfo.school}</div>
                    )}
                    {scout.personalInfo.grade && (
                      <div><span className="font-medium">Grade:</span> {scout.personalInfo.grade}</div>
                    )}
                  </div>
                </div>
              )}

              {scout.emergencyContacts && scout.emergencyContacts.length > 0 && (
                <div className="flex flex-col space-y-2">
                  <h3 className="font-semibold">Emergency Contacts</h3>
                  {scout.emergencyContacts.map(contact => (
                    <div key={contact.id} className="border p-2 rounded-md">
                      <div><span className="font-medium">Name:</span> {contact.name}</div>
                      <div><span className="font-medium">Relationship:</span> {contact.relationship}</div>
                      <div><span className="font-medium">Phone:</span> {contact.phone}</div>
                      {contact.email && <div><span className="font-medium">Email:</span> {contact.email}</div>}
                      <div><span className="font-medium">Authorized for Pickup:</span> {contact.isAuthorizedForPickup ? 'Yes' : 'No'}</div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="achievements" className="mt-4">
            <div className="space-y-4">
              <h3 className="font-semibold">Achievements & Badges</h3>
              {scout.achievements && scout.achievements.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {scout.achievements.map(achievement => (
                    <div key={achievement.id} className="border p-2 rounded-md">
                      <div className="font-medium">{achievement.name}</div>
                      <div className="text-sm text-gray-500">{achievement.description}</div>
                      <div className="text-xs text-gray-400">Earned: {formatDate(achievement.dateEarned, "MMM dd, yyyy")}</div>
                      <div className="text-xs text-gray-400">Type: {achievement.type || 'Badge'}</div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No achievements recorded yet.</p>
              )}
            </div>
          </TabsContent>

          <TabsContent value="medical" className="mt-4">
            <div className="space-y-4">
              <h3 className="font-semibold">Medical Information</h3>
              {scout.medicalInfo ? (
                <div>
                  <div className="mb-3">
                    <h4 className="font-medium">Allergies</h4>
                    {scout.medicalInfo.allergies.length > 0 ? (
                      <ul className="list-disc list-inside">
                        {scout.medicalInfo.allergies.map((allergy, index) => (
                          <li key={index}>{allergy}</li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-gray-500">None recorded</p>
                    )}
                  </div>

                  <div className="mb-3">
                    <h4 className="font-medium">Medications</h4>
                    {scout.medicalInfo.medications.length > 0 ? (
                      <ul className="list-disc list-inside">
                        {scout.medicalInfo.medications.map((med, index) => (
                          <li key={index}>{med}</li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-gray-500">None recorded</p>
                    )}
                  </div>

                  <div className="mb-3">
                    <h4 className="font-medium">Medical Conditions</h4>
                    {scout.medicalInfo.conditions.length > 0 ? (
                      <ul className="list-disc list-inside">
                        {scout.medicalInfo.conditions.map((condition, index) => (
                          <li key={index}>{condition}</li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-gray-500">None recorded</p>
                    )}
                  </div>

                  <div className="grid grid-cols-2 gap-2 mt-3">
                    {scout.medicalInfo.doctorName && (
                      <div><span className="font-medium">Doctor:</span> {scout.medicalInfo.doctorName}</div>
                    )}
                    {scout.medicalInfo.doctorPhone && (
                      <div><span className="font-medium">Doctor's Phone:</span> {scout.medicalInfo.doctorPhone}</div>
                    )}
                    {scout.medicalInfo.insuranceProvider && (
                      <div><span className="font-medium">Insurance Provider:</span> {scout.medicalInfo.insuranceProvider}</div>
                    )}
                    {scout.medicalInfo.insuranceNumber && (
                      <div><span className="font-medium">Insurance #:</span> {scout.medicalInfo.insuranceNumber}</div>
                    )}
                  </div>
                </div>
              ) : (
                <p className="text-gray-500">No medical information recorded.</p>
              )}
            </div>
          </TabsContent>

          <TabsContent value="attendance" className="mt-4">
            <div className="space-y-4">
              <h3 className="font-semibold">Attendance Record</h3>
              {scout.attendance && scout.attendance.length > 0 ? (
                <div className="overflow-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr>
                        <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {scout.attendance.map((record) => (
                        <tr key={record.id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{formatDate(record.date, "MMM dd, yyyy")}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm">
                            <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${record.present ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                              {record.present ? 'Present' : 'Absent'}
                            </span>
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-500">{record.notes || '-'}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <p className="text-gray-500">No attendance records available.</p>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
      
      <div className="mt-5 flex justify-end gap-2">
        <DialogPrimitive.Close asChild>
          <Button variant="outline">Close</Button>
        </DialogPrimitive.Close>
        <DialogPrimitive.Close asChild>
          <Button>Edit Profile</Button>
        </DialogPrimitive.Close>
      </div>
      </DialogContent>
    </DialogPrimitive.Root>
  );
}
