// MSA Portal - Supabase PostgreSQL Schema
// Converted from Zane's MongoDB schema to work with Supabase

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  role           String    // "parent", "leader", "executive", "parent_leader", "support"
  avatar         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Multi-role support for parent_leaders
  isParent       Boolean   @default(false)
  isLeader       Boolean   @default(false)
  isExecutive    Boolean   @default(false)
  isSupport      Boolean   @default(false)
  
  // Default portal preference for parent_leaders
  defaultPortal  String?   // "parent" or "leader" - for users with both roles
  
  // Relations
  scouts         Scout[]   @relation("ParentToScout")
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  leaderGroups   UserGroup[] @relation("UserToGroup")
  attendance     Attendance[] @relation("UserAttendance")
  incidentReports IncidentReport[] @relation("UserIncidentReports")

  // Online status
  lastSeen       DateTime  @default(now())
  isOnline       Boolean   @default(false)
}

model Scout {
  id             String    @id @default(cuid())
  name           String
  age            Int
  rank           String
  joinedDate     DateTime  @default(now())
  parentId       String
  groupId        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  parent         User      @relation("ParentToScout", fields: [parentId], references: [id], onDelete: Cascade)
  group          Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  achievements   Achievement[]
  attendance     Attendance[] @relation("ScoutAttendance")
}

model Group {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  scouts         Scout[]
  groupLeaders   UserGroup[] @relation("GroupToUser")
  events         Event[]   @relation("GroupEvents")
  incidentReports IncidentReport[] @relation("GroupIncidentReports")
}

model Event {
  id                  String    @id @default(cuid())
  title               String
  description         String
  location            String
  startDate           DateTime
  endDate             DateTime
  groupId             String?
  requiresPermissionSlip Boolean @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  group               Group?    @relation("GroupEvents", fields: [groupId], references: [id], onDelete: SetNull)
  attendances         Attendance[]
}

model Message {
  id             String    @id @default(cuid())
  content        String
  senderId       String
  receiverId     String
  read           Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  sender         User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Achievement {
  id             String    @id @default(cuid())
  name           String
  description    String
  dateEarned     DateTime  @default(now())
  scoutId        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  scout          Scout     @relation(fields: [scoutId], references: [id], onDelete: Cascade)
}

model Attendance {
  id             String    @id @default(cuid())
  scoutId        String
  userId         String
  eventId        String
  status         String    // "present", "absent", "excused"
  date           DateTime  @default(now())
  
  // Relations
  scout          Scout     @relation("ScoutAttendance", fields: [scoutId], references: [id], onDelete: Cascade)
  user           User      @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade)
  event          Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Document {
  id             String    @id @default(cuid())
  title          String
  fileUrl        String
  fileType       String
  description    String?
  uploadedBy     String
  uploadDate     DateTime  @default(now())
  type           String    // "form", "policy", "announcement", etc.
  size           Int       // Size in bytes
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Report {
  id             String    @id @default(cuid())
  title          String
  type           String    // "attendance", "achievement", "financial", etc.
  date           DateTime  @default(now())
  generatedBy    String
  data           Json      // Report data in JSON format
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model IncidentReport {
  id             String    @id @default(cuid())
  title          String
  description    String
  severity       String    // "low", "medium", "high", "critical"
  status         String    // "open", "investigating", "resolved", "closed"
  reportedBy     String
  assignedTo     String?
  location       String?
  dateOccurred   DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  reporter       User      @relation("UserIncidentReports", fields: [reportedBy], references: [id], onDelete: Cascade)
  
  // Optional group association (support users won't have group access)
  groupId        String?
  group          Group?    @relation("GroupIncidentReports", fields: [groupId], references: [id], onDelete: SetNull)
}

model UserGroup {
  id             String    @id @default(cuid())
  userId         String
  groupId        String
  role           String    // "leader", "assistant", etc.
  createdAt      DateTime  @default(now())
  
  // Relations
  user           User      @relation("UserToGroup", fields: [userId], references: [id], onDelete: Cascade)
  group          Group     @relation("GroupToUser", fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
}